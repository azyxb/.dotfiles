/* See LICENSE file for copyright and license details. */

/* keys */
#include <X11/XF86keysym.h>

/* appearance */
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int gappx     = 6;        /* gaps between windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const char *fonts[]          = { "dina:size=8" };
static const char dmenufont[]       = "dina:size=8";
static const char col_1[]           = "#000000";
static const char col_2[]           = "#AFAFAF";
static const char col_3[]           = "#AFAFAF";
static const char col_4[]           = "#54487A";
static const char col_5[]           = "#54487A";
static const char *colors[][3]      = {
	/*               fg     bg     border */
	[SchemeNorm] = { col_3, col_1, col_2 },
	[SchemeSel]  = { col_4, col_1, col_5 },
	[SchemeHid]  = { col_5, col_1, col_5  },
};

/* tagging */
static const char *tags[] = { "00", "01", "02", "10", "11", "12", "20", "21", "22" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     iscentered     isfloating   monitor */
	{ "st",       NULL,       NULL,       0,            1,             1,           -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_1, "-nf", col_3, "-sb", col_1, "-sf", col_4, NULL };
static const char *termcmd[]  = { "/usr/bin/st", "-g", "110x27", NULL };
static const char *upvol[]   = { "/usr/bin/amixer", "set", "Master", "10%+", NULL };
static const char *downvol[] = { "/usr/bin/amixer", "set", "Master", "10%-", NULL };
static const char *mutevol[] = { "/usr/bin/amixer", "set", "Master", "toggle", NULL };
static const char *upbri[] = { "/usr/bin/sudo", "/usr/bin/xbacklight", "-inc", "10", NULL };
static const char *downbri[] = { "/usr/bin/sudo", "/usr/bin/xbacklight", "-dec", "10", NULL };
static const char *sleepi[] = { "/usr/bin/xset", "dpms", "force", "off", NULL };
static const char *microi[] = { "/usr/bin/amixer", "set", "Capture", "toggle", NULL };
static const char *scroti[] = { "/usr/bin/scrot", NULL };
static const char *scrotif[] = { "/usr/bin/scrot", "--focused", NULL };
static const char *mgeditor[] = { "/usr/bin/st", "-g", "180x60", "-e", "mg", NULL };
static const char *surfi[] = { "/usr/bin/surf", "/home/ayoub/.config/startpage/index.html", NULL };

static Key keys[] = {
	/* modifier                     key        			function        argument */
	{ MODKEY,                       XK_r,      			spawn,          {.v = dmenucmd } },
	{ MODKEY,			XK_Return, 			spawn,          {.v = termcmd } },
	{ MODKEY,			XK_e,				spawn,		{.v = mgeditor } },
	{ ControlMask,			XK_t,                           spawn,          {.v = surfi } },
	{ 0,                            XK_Print,			spawn,          {.v = scroti } },
	{ ShiftMask,			XK_Print,			spawn,          {.v = scrotif } },
	{ 0,                            XF86XK_Sleep,			spawn,          {.v = sleepi } },
	{ 0,                            XF86XK_AudioMicMute,		spawn,          {.v = microi } },
	{ 0,                            XF86XK_MonBrightnessDown,	spawn,          {.v = downbri } },
	{ 0,                            XF86XK_MonBrightnessUp,		spawn,          {.v = upbri } },
	{ 0,				XF86XK_AudioLowerVolume, 	spawn, 		{.v = downvol } },
	{ 0,                            XF86XK_AudioRaiseVolume, 	spawn, 		{.v = upvol } },
	{ 0,                            XF86XK_AudioMute, 		spawn, 		{.v = mutevol } },
	{ MODKEY,                       XK_b,      			togglebar,      {0} },
	{ MODKEY,                       XK_j,      			focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_k,      			focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      			incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      			incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      			setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      			setmfact,       {.f = +0.05} },
	{ MODKEY|ShiftMask,             XK_Return, 			zoom,           {0} },
	{ MODKEY,                       XK_Tab,    			view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      			killclient,     {0} },
	{ MODKEY,                       XK_t,      			setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      			setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      			setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  			setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  			togglefloating, {0} },
	{ MODKEY,                       XK_0,      			view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      			tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  			focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, 			focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  			tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, 			tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      			0)
	TAGKEYS(                        XK_2,                      			1)
	TAGKEYS(                        XK_3,                      			2)
	TAGKEYS(                        XK_4,                      			3)
	TAGKEYS(                        XK_5,                      			4)
	TAGKEYS(                        XK_6,                      			5)
	TAGKEYS(                        XK_7,                      			6)
	TAGKEYS(                        XK_8,                      			7)
	TAGKEYS(                        XK_9,                      			8)
	{ MODKEY|ShiftMask,             XK_q,      			quit,           {0} },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button1,        togglewin,      {0} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

